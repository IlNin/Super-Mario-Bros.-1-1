<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creazione Variabili

velocitaSalto = 24; // altezza massima di salto
tieniPremutoSalto = 0; // indica se viene tenuto premuto il pulsante salto
velocitaMovimento = 4; // velocita massima di movimento
velocitaCorsa = 8; // velocita massima di corsa
gravita = 0.8; // gravità che incide sul salto
velocitaX = 0; // velocita orizzontale attuale, usata per il movimento
velocitaY = 0; // velocità verticale atuale, usata per il salto
destra = true; // indica la direzione di puntamento
cambioOrientamento = false; // indica se ha cambiato direzione di puntamento
pattina = false; // indica se Mario sta pattinando per via dell'inerzia
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controllo caduta burrone
if (y &gt; 1100) { // Mario è caduto sotto lo stage
 instance_create(x, y, obj_mario_dead);
 instance_destroy(); }

 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controllo termine Combo

if (!place_free(x, y+1) &amp;&amp; !place_meeting(x, y+1, obj_goomba)) { // Mario NON è atterrato su un nemico, ma ha toccato terra
 global.moltiplicatoreCombo = 0; } // Combo resettata

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controllo uccisione nemici

var nemico; // Variabile in cui verrà salvata l'instance del nemico ucciso

// Viene ucciso un goomba
nemico = instance_place(x, y+1, obj_goomba); 
if nemico != noone {
 sprite_index = spr_mario_jump; // Mario rimbalza in aria dopo aver ucciso un nemico
 
 with (nemico) {
  audio_play_sound(snd_stomp, 1, false);
  ucciso = true; // Il Goomba viene distrutto
  if (global.moltiplicatoreCombo == 0) { // Controlla lo stato della Combo
   instance_create(x, y, obj_100pts); // Vengono mostrati i punti
   global.punteggio = global.punteggio + 100; }
  else if (global.moltiplicatoreCombo == 1) {
   instance_create(x, y, obj_200pts);
   global.punteggio = global.punteggio + 200; }
  else if (global.moltiplicatoreCombo == 2) {
   instance_create(x, y, obj_400pts);
   global.punteggio = global.punteggio + 400; }
  else if (global.moltiplicatoreCombo == 3) {
   instance_create(x, y, obj_500pts);
   global.punteggio = global.punteggio + 500; }
  else if (global.moltiplicatoreCombo == 4) {
   instance_create(x, y, obj_800pts);
   global.punteggio = global.punteggio + 800; }
  else {
   instance_create(x, y, obj_1000pts);
   global.punteggio = global.punteggio + 1000; }
  global.moltiplicatoreCombo = global.moltiplicatoreCombo + 1; } // Aggiorna la Combo
  
 if keyboard_check(ord("W")) { // Se il giocatore salta dopo aver ucciso un nemico, rimbalza ulteriormente in aria
  velocitaY = -velocitaSalto; }
 else {
  velocitaY = -velocitaSalto/2; } }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controllo input, attrito e inerzia

// Resetta il gioco
if keyboard_check(ord("R")) {
 room_restart(); }

// Controlla input e aggiorna la velocita orizzontale
if keyboard_check(ord("D")) &amp;&amp; place_free(x+1, y) { // il giocatore preme destra e aumenta la sua velocità
 if (keyboard_check(ord("L")) &amp;&amp; velocitaX &lt; velocitaCorsa &amp;&amp; velocitaX &gt; 0) { // Il giocatore preme "L" per correre. La corsa ha una velocità massima
  velocitaX = velocitaX + 0.1; }
 else if (keyboard_check(ord("L")) &amp;&amp; velocitaX &lt; 0) { // Se il giocatore sta correndo nella direzione opposta, aumenta l'attrito
  velocitaX = velocitaX + 0.2;
  pattina = true; }
 else if (velocitaX &gt; velocitaMovimento &amp;&amp; velocitaX &lt;= velocitaCorsa) { // Il giocatore smette di correre, e assume la velocità di cammino
  velocitaX = velocitaX - 0.1; }
 else if (velocitaX &lt; velocitaMovimento) { // Il giocatore cammina e assume gradualmente velocità
  velocitaX = velocitaX + 0.1;
  if (velocitaX &lt; 0) { // Se il giocatore sta camminando a sinistra, aumenta l'attrito
   velocitaX = velocitaX + 0.1; } } }
 
  
else if keyboard_check(ord("A")) &amp;&amp; place_free(x-1, y) { // Idem, ma per l'altra direzione
 if (keyboard_check(ord("L")) &amp;&amp; velocitaX &gt; -velocitaCorsa &amp;&amp; velocitaX &lt; 0) {
  velocitaX = velocitaX - 0.1; }
 else if (keyboard_check(ord("L")) &amp;&amp; velocitaX &gt; 0) {
  velocitaX = velocitaX - 0.2;
  pattina = true; }
 else if (velocitaX &lt; -velocitaMovimento &amp;&amp; velocitaX &gt;= -velocitaCorsa) {
  velocitaX = velocitaX + 0.1; }
 else if (velocitaX &gt; -velocitaMovimento) {
  velocitaX = velocitaX - 0.1;
  if (velocitaX &gt; 0) {
   velocitaX = velocitaX - 0.1; } } }
  
else if (!place_free(x, y+1)) { // Se il giocatore non preme nulla, entra in gioco l'inerzia
 if (velocitaX &gt; 0) {
  velocitaX = velocitaX - 0.1; }
 else if (velocitaX &lt; 0) {
  velocitaX = velocitaX + 0.1; } }
  
// Controlla l'input e aggiorna la velocità orizzontale
if keyboard_check_pressed(ord("W")) &amp;&amp; !place_free(x, y+1) { // il giocatore salta da terra
 audio_play_sound(snd_mario_jump, 0, false);
 velocitaY = -velocitaSalto/2;
 tieniPremutoSalto = 1; }

if (tieniPremutoSalto &gt;= 1 &amp;&amp; keyboard_check(ord("W"))) { // Se il giocatore continua a tenere premuto il pulsante di salto dopo aver saltato, il salto diventa sempre più alto
 tieniPremutoSalto = tieniPremutoSalto + 1;
 if (tieniPremutoSalto &lt; 22) {
  velocitaY = velocitaY - 0.8; }
 else {
  tieniPremutoSalto = 0; } }
else { // Sennò non può più farlo!
 tieniPremutoSalto = 0; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movimento, collisioni e gravità

// Mario incontra il bordo della stanza
if (x+velocitaX) &gt;= room_width - 40 || (x+velocitaX) &lt;= 40 {
 velocitaX = 0; }

// Effetto della gravità 
if (velocitaY &lt; 10) { 
 velocitaY = velocitaY + gravita; }
 
// Movimento di Mario dovuto alle sua velocità orizzontale e controllo collisioni
if !place_free(x+velocitaX, y) { // Mario incontra un ostacolo
 while place_free(x+sign(velocitaX), y) {
  x = x+sign(velocitaX); }
 if place_meeting(x+sign(velocitaX), y, obj_goomba) { // Mario incontra un nemico
  instance_create(x, y, obj_mario_dead);
  instance_destroy(); }
 else if place_meeting(x+sign(velocitaX), y, obj_flag) { // Mario finisce il livello
  instance_create(x, y, obj_mario_climb);
  instance_destroy(); }
 velocitaX = 0; }
else { // Il movimento accade senza problemi
 x = x + velocitaX; }
 
// Movimento di Mario dovuto alla sua velocità verticale e controllo collisioni
if !place_free(x, y+velocitaY) {
 while place_free(x, y+sign(velocitaY)) {
  y = y+sign(velocitaY); }
 if (sign(velocitaY) == -1) {
  velocitaY = 1;
  tieniPremutoSalto = 0; } }
else {
 y = y + velocitaY; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controlla la direzione

if (velocitaX &gt; 0 &amp;&amp;  destra == false &amp;&amp; !place_free(x, y+1)) {
 destra = true;
 cambioOrientamento = true; }
else if (velocitaX &lt; 0 &amp;&amp; destra == true &amp;&amp; !place_free(x, y+1)) {
 destra = false;
 cambioOrientamento = true; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controllo sprite

if !place_free(x, y+1) {
 if (pattina == true) {
  sprite_index = spr_mario_skid; }
 else if (velocitaX == 0) {
  sprite_index = spr_mario; }
 else if (velocitaX != 0) {
  sprite_index = spr_mario_walk;
  image_speed = 0.2; } }
else {
 sprite_index = spr_mario_jump; }

if (cambioOrientamento == true) {
 image_xscale = -image_xscale;
 cambioOrientamento = false; }

pattina = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
